// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//#include "VoxelValues.compute"

static const float3 voxelVertices[8] =
{
        float3(0, 0, 0), //0
        float3(1, 0, 0), //1
        float3(0, 1, 0), //2
        float3(1, 1, 0), //3

        float3(0, 0, 1), //4
        float3(1, 0, 1), //5
        float3(0, 1, 1), //6
        float3(1, 1, 1), //7
};

static const float3 voxelFaceChecks[6] =
{
        float3(0, 0, -1), //back
        float3(0, 0, 1), //front
        float3(-1, 0, 0), //left
        float3(1, 0, 0), //right
        float3(0, -1, 0), //bottom
        float3(0, 1, 0) //top
};

static const int voxelVertexIndex[6][4] =
{
    { 0, 1, 2, 3 },
    { 4, 5, 6, 7 },
    { 4, 0, 6, 2 },
    { 5, 1, 7, 3 },
    { 0, 1, 4, 5 },
    { 2, 3, 6, 7 },
};

static const float2 voxelUVs[4] =
{
        float2(0, 0),
        float2(0, 1),
        float2(1, 0),
        float2(1, 1)
};

static const int voxelTris[6][6] =
{
    { 0, 2, 3, 0, 3, 1 },
    { 0, 1, 2, 1, 3, 2 },
    { 0, 2, 3, 0, 3, 1 },
    { 0, 1, 2, 1, 3, 2 },
    { 0, 1, 2, 1, 3, 2 },
    { 0, 2, 3, 0, 3, 1 },
};


struct VoxelColor32
{
    float color;
    float metallic;
    float smoothness;
};

//struct Voxel {
//    uint ID;
//};

StructuredBuffer<VoxelColor32> voxelColors;
RWStructuredBuffer<uint> voxelArray;
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<float4> colorBuffer;
RWStructuredBuffer<int> indexBuffer;
RWStructuredBuffer<uint> counter;

float3 chunkPosition;

uint chunkWidth;
uint chunkHeight;

float packFloats(float xF, float yF)
{
    float2 output = float2(xF, yF);
    output.x = floor(output.x * (100 - 1));
    output.y = floor(output.y * (100 - 1));

    return (output.x * 100) + output.y;
}

float packFloats(float2 xy)
{
    float2 output = xy;
    output.x = floor(output.x * (100 - 1));
    output.y = floor(output.y * (100 - 1));

    return (output.x * 100) + output.y;
}

float2 unpackFloats(float f)
{
    int input = int(f);

    float x = input >> 8 & 0xff;
    float y = input >> 0 & 0xff;

    return float2(x, y);
}

uint flattenCoord(uint3 idx)
{
    return (idx.z * (chunkHeight + 0) + idx.y) * (chunkWidth + 0) + idx.x;
}

bool VoxelIsSolid(uint3 pos)
{
    return ((voxelArray[flattenCoord(pos)] >> 8) & 0x000000ff) != 0;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xz >= chunkWidth))// || any(id.xz < 1))
        return;

    uint block = voxelArray[flattenCoord(id)];
    uint blockType = (block >> 8) & 0x000000ff;
    uint blockColor = (block) & 0x000000ff;

    if (blockType == 0)
        return;

    float3 faceVertices[4];
    float2 faceUVs[4];
    float4 color = float4(voxelColors[blockColor].color, packFloats(voxelColors[blockColor].metallic, voxelColors[blockColor].smoothness), 0, 0);
    uint vertCount = 0;
    uint triCount = 0;

    for (int i = 0; i < 6; i++)
    {
        //Check if there's a solid block against this face
        if (VoxelIsSolid(id + voxelFaceChecks[i]))
            continue;

        //Draw this face
        counter.IncrementCounter();
        InterlockedAdd(counter[0], 6, vertCount);
        InterlockedAdd(counter[1], 6, triCount); //not used here, but will be used in a shared vertex configuration

        //Collect the appropriate vertices from the default vertices and add the block position
        for (int j = 0; j < 4; j++)
        {
            faceVertices[j] = voxelVertices[voxelVertexIndex[i][j]] + id + chunkPosition;
            faceUVs[j] = voxelUVs[j];
        }

        for (int k = 0; k < 6; k++)
        {
            vertexBuffer[vertCount + k] = faceVertices[voxelTris[i][k]];
            color.b = faceUVs[voxelTris[i][k]].x;
            color.a = faceUVs[voxelTris[i][k]].y;
            colorBuffer[vertCount + k] = color;

            indexBuffer[triCount + k] = vertCount + k;
        }
    }
}
